Git

***************************************************************************************************
Git简介
	Git是版本管理工具
	Git的创始人也是Linux
		目标：告诉，设计简单，允许几千个分支，对非线性开发模式的强力支持，完全分布式
	
	与svn的对比
		svn是集中式的版本控制系统
		工作原理：svn的管理员创建普通用户，普通用户从svn服务器上下载项目代码。
			不同的普通用户开发不同的功能模块，普通用户每个工作阶段，需要提交代码到服务器
			提交代码步骤是先将服务器上最新的代码下载到本地，与本地的进行同步，在将本地的代码进行上传更新。
		具有全局版本号

		优点：可以看到其他人员的开发进度与内容，管理员管理开发权限很方便
			具有良好的中文支持以及图形界面支持
		缺点：服务器单点故障（主机）影响极大，容错性差

Git
	去中心化思想。
	对于一个项目，每个人的机器上都有一个完整的版本库，而不是一个中央服务器。开发人员之间的版本共享。
	通过PULL拉取和PUSH将代码推送到共享代码库。或者Clone下载全部内容。
	Git是将内容按照元数据的方式进行存储，而svn是按文件来存储
	Git的内容完整性要由于svn，Git的内容存储使用的是SHA-1哈希算法，可以确保代码内容的完整性，
		降低遇到磁盘故障或网络问题时对版本库的损坏

	一些文员的资料也同样重要，也会使用git来管理

Git工作流程
	从远程仓库中，克隆Clone Git资源作为本地仓库
	在本地仓库中checkout代码，进行开发，修改代码
	在提交代码之前，先将代码提交add到暂存区
	提交commit代码修改，首先提交到本地仓库，在本地仓库中保存修改的各个版本
	修改完成后，需要和开发团队成员共享代码，将代码push到远程仓库。
	需要查看其他人的代码时，将代码pull（Fetch + Merge）到本地工作区

Git的安装
	官网下载 git-scm.com/download
	最早Git只在Linux和Unix上跑

	可视化TortoiseGit

***************************************************************************************************
Git的基本配置
	使用 git config来配置或读取相应的工作环境变量
	查看已有的全部配置信息
		git config --list
	查看已有的某一个配置信息
		git config user.name
	设置个人的用户名称以及电子邮件地址
		git config --global user.name "用户名"
		git config --global user.email 邮箱地址

差异分析工具
	用来在解决合并冲突时，使用那种差异分析工具
	举例：改用vimdiff
	git config --global merge.tool vimdiff

***************************************************************************************************
使用git管理文件的版本
	
创建版本库
	版本库又名仓库，repository，此目录中的所有文件都可以被Git管理，每个文件的修改，删除，Git都可以进行跟踪。
	以便在任何时刻追踪其历史，并在需要的情况下，在将来的某个时刻进行还原。
	git是分布式管理工具，不需要连网也具备完整的版本管理工具

	指令，在目标文件夹内 git bash here
		git init
		目标文件夹为工作目录，其内生成的.git文件是git目录，也就是版本库

	使用TortoiseGit创建，使用右键菜单，创建git目录

	解决图标覆盖显示问题，
		修改注册表配置文件
		win + r 运行 regedit.exe 打开注册表管理器
		HKEY_LOCAL_MACHINE\Software\Microsoft\windows\CurrentVersion\Explorer
		新建字符串值，命名：Max Cached Icons 最大缓存图标的值为2000

		tortoiseGit 图标覆盖 设置为默认即可

使用tortoisegit提交文件
	右键 添加add 将文件从工作空间提交到缓冲区（暂存区）
	右键 提交commit 将暂存的文件提交到本地仓库，需要填写版本描述（日志信息）
	
使用git命令提交文件
	使用GitBash 在对应工作目录下打开gitbash
	git add 文件名    可以将该文件添加到暂存区
	git commit 文件名   将文件提交到本地仓库
		会进入类似linux的vim的操作，
		会先编辑提交日志信息，i insert 开始编辑 esc 退出 
		shift:然后进入命令模式 输入wq退出

***************************************************************************************************
工作区与暂存区与版本库
	工作区创建文件 add到 暂存区，而不是直接放到版本库中，
	暂存区一般叫index，可以理解为一种缓存，可以快速的 checkout检查，修改，提交 以及删除 rm --checked
	文件修改确认无误后，将暂存区的文件 commit 到 当前的分支中，版本库，本地仓库中。
	git默认创建的本地仓库是master分支，此时有一个HEAD指针指向master分支。（ .git/refs/heads/master）
	故此git commit默认提交更改是提交到master分支上

	暂存区可以存放很多文件的反复修改，然后一次性提交到选定分支上。

查看当前仓库的状态，显示有变更的文件
	命令：git status 查看在上次提交之后，是否有对文件进行再次修改
		会显示已提交的变更，未提交的变更，未跟踪的文件等
	参数： -s  简化输出
		A	表示已经add添加，但是没提交
		??	表示没添加到git进行管理
		D	表示已经被删除的文件

提交修改
	对于已经提交过的文件发生修改，再次提交即可。

查看修改历史
	图形界面 show log 显示日志
	命令： git log 文件名
		参数： --oneline  简化显示

差异比较
	Diff 将文件与以前的版本进行对比
	图形界面 比较差异
	命令：git diff 文件名
	注：文件内容网网较长，建议使用图形界面查看比较

还原修改
	Revert
	图形界面，选择tortoisegit的还原修改，可以将还未提交的文件还原到修改之前的提交版本

删除文件
	Delete
	图形界面，使用tortoisegit，进行删除
	使用git进行删除是将其从版本库中移除，与普通的delete删除文件不同。如果使用普通的删除，再次创建同名文件时，依旧在版本库中
	git rm 

移动或重命名工作区文件
	图形界面，使用tortoisegit，进行重命名。如果使用普通的重命名，再次创建同名文件时，依旧在版本库中
	git mv

***************************************************************************************************
将项目工程文件作为目录，提交到版本库


***************************************************************************************************
远程仓库

开源社区 github


































***************************************************************************************************
GitHub Desktop是一个图形化界面的Git客户端，提供了简单易用的界面来管理代码库、进行版本控制等操作。下面是使用GitHub Desktop的详细操作说明：

下载和安装：访问GitHub Desktop的官方网站（https://desktop.github.com/），根据你的操作系统下载适当的安装程序，并按照提示进行安装。

登录GitHub账号：打开GitHub Desktop，在首次运行时，你需要使用你的GitHub账号登录。点击"Sign in to GitHub.com"按钮，输入你的GitHub用户名和密码，点击"Sign in"进行登录。

克隆代码库：在GitHub Desktop的主界面，点击左上角的"File"菜单，选择"Clone repository"选项。在弹出的窗口中，选择要克隆的代码库，点击"Clone"按钮。选择本地存储的路径，点击"Choose"进行克隆。

创建分支：在GitHub Desktop的主界面，选择你要工作的代码库。点击顶部工具栏中的"Current branch"下拉菜单，然后选择"New branch"。输入新分支的名称，并选择从哪个分支派生，点击"Create branch"按钮。

进行修改：在你的代码编辑器中进行代码修改，添加、删除或修改文件。

提交变更：返回GitHub Desktop，你会看到文件的变更被列出。可以选择要包含在提交中的文件，输入提交消息，并选择要提交到的分支。点击下方的"Commit to <branch name>"按钮进行提交。

推送变更：在提交后，点击页面右上角的"Push origin"按钮，将本地的提交推送到远程仓库。

拉取变更：如果其他人对远程仓库进行了变更，你可以点击页面右上角的"Fetch origin"按钮，将远程仓库中的变更拉取到本地。

分支管理：在GitHub Desktop的主界面，可以点击左侧的"Current branch"下拉菜单，选择要切换的分支。也可以在"Branches"选项卡中查看和管理所有分支。

查看历史记录：在GitHub Desktop的主界面，点击顶部工具栏中的"History"选项卡，可以查看提交历史记录和变更详细信息。
























































































